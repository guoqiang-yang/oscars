<?php
/**
 * 手机下单活动优惠处理
 */
include_once('../../../global.php');
class App extends App_Admin_Ajax
{
    private $oid;
    private $gift_products;
    private $discount_products;
    private $activityProducts = array();
    
    protected function getPara()
    {
        $this->oid = Tool_Input::clean('r', 'oid', TYPE_UINT);
        $this->district = Tool_Input::clean('r', 'district', TYPE_UINT);
        $this->gift_products = Tool_Input::clean('r', 'gift_products', TYPE_STR);
        $this->discount_products = Tool_Input::clean('r', 'discount_products', TYPE_STR);
    }
    
    protected function checkAuth()
    {
        parent::checkAuth('/order/add_order_logistics_h5'); // TODO: Change the autogenerated stub
    }
    
    protected function checkPara()
    {
        if(!empty($this->gift_products))
        {
            $this->gift_products = array_filter(explode(';', $this->gift_products));
            foreach ($this->gift_products as $item)
            {
                list($pid, $num) = explode(':', $item);
                if(empty($pid) || empty($num))
                {
                    throw new Exception('赠品数据不合法');
                }
                $this->activityProducts['gift_products'][] = array('pid' => $pid, 'num' => $num);
            }
        }else{
            $this->activityProducts['gift_products'] = 1;
        }
        if(!empty($this->discount_products))
        {
            $this->discount_products = array_filter(explode(';', $this->discount_products));
            foreach ($this->discount_products as $item)
            {
                list($pid, $num) = explode(':', $item);
                if(empty($pid) || empty($num))
                {
                    throw new Exception('特价商品数据不合法');
                }
                $this->activityProducts['discount_products'][] = array('pid' => $pid, 'num' => $num);
            }
        }else{
            $this->activityProducts['discount_products'] = 1;
        }
    }
    
    protected function main()
    {
        $order = Order_Api::getOrderInfo($this->oid);
        $orderProducts = Order_Api::getOrderProducts($this->oid);
        if ($order['step'] >= Conf_Order::ORDER_STEP_PICKED)
        {
            throw new Exception('订单已出库，不能修改！！');
        }
        $this->cid = $order['cid'];
        if ($order['status'] != Conf_Base::STATUS_NORMAL)
        {
            throw new Exception('订单状态异常，不能编辑！');
        }
        // 活动优惠信息处理
        if ($order['step'] < Conf_Order::ORDER_STEP_SURE)
        {
            //优惠
            $info = array_merge($order, array());
            $realOrderProducts = Privilege_Api::getRealBuyProducts($orderProducts['products'], $this->oid);
            $privilegeInfo = Privilege_2_Api::savePromotionPrivilege($info['cid'], $realOrderProducts, $info, false, $this->activityProducts);
            // 更新优惠信息
            Order_Api::updateOrderInfo($this->oid, array('privilege' => $privilegeInfo['total_privilege']));
            $amountChange = array(
                '修改订单' =>  "订单金额". $order['price'] / 100 . "优惠调整为". $privilegeInfo['total_privilege'] / 100
            );
            //$amountChange = "从优惠：". $order['total_privilege'] . "调整为优惠：". $privilegeInfo['total_privilege'];
            // 更新操作日志
            Admin_Api::addOrderActionLog($this->_uid, $this->oid, Conf_Order_Action_Log::ACTION_CHANGE_PRODUCTS, $amountChange);
        }
    }
    
    protected function outputPage()
    {
        $result = array('oid' => $this->oid);
        $response = new Response_Ajax();
        $response->setContent($result);
        $response->send();
        exit;
    }
}

$app = new App('pri');
$app->run();